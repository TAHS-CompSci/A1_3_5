{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Terms to Know:\n",
    "- Iterable: A property of collections that are used to provide elements one at a time and in sequence \n",
    "- Sliced: Selecting a portion of a collection\n",
    "- Concatenation: Attaching two things side-by-side, frequently strings of text\n",
    "- len() function returns the number of elements in an iterable "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type('tr' + \"y this\")\n",
    "type('tr' + 5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "B\n",
      "a\n",
      "b\n",
      "Y\n",
      "!\n",
      "Yoda\n",
      "Adorable!\n",
      "Baby Yoda is the best\n",
      "22\n"
     ]
    }
   ],
   "source": [
    "slogan = 'Baby Yoda is Adorable!'\n",
    "\n",
    "print(slogan[0])\n",
    "\n",
    "print(slogan[8])\n",
    "\n",
    "print(slogan[2])\n",
    "\n",
    "print(slogan[5])\n",
    "\n",
    "print(slogan[21])\n",
    "\n",
    "print(slogan[5:9])\n",
    "\n",
    "print(slogan[13:22])\n",
    "\n",
    "print(slogan[:13] + 'the best')\n",
    "\n",
    "print(len(slogan))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'to sou' in 'Welcome to south dakota'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "essay = \"What? why!, 'bruh'\"\n",
    "\n",
    "def how_eligible(essay):\n",
    "    new_line = '?' in essay\n",
    "    ans = len(new_line)\n",
    "    return ans\n",
    "\n",
    "# Confusion "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "d an\n"
     ]
    }
   ],
   "source": [
    "a = 'one string'\n",
    "b = 'another'\n",
    "c = a[:3] + ' and ' + b\n",
    "\n",
    "print(c[6:10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Conclusion \n",
    "1. Well if you wanted to slice the string then it might need more data to use so it probably does matter\n",
    "2. It makes more data then runs the program, or maybe it already runs off of more data and just runs the code"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
